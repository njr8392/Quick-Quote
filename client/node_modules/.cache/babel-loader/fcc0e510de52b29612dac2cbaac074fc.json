{"ast":null,"code":"var _jsxFileName = \"/Users/nicholasrodgers/go/src/github.com/njr8392/quotesys/client/src/Quote.js\";\nimport React, { useState, useEffect } from 'react';\n\nfunction Quotes() {\n  const [error, setError] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [quotes, setQuote] = useState([]); // Note: the empty deps array [] means\n  // this useEffect will run once\n  // similar to componentDidMount()\n\n  useEffect(() => {\n    fetch(\"/quote\").then(res => res.json()).then(result => {\n      setIsLoaded(true);\n      setQuote(result);\n    }, // Note: it's important to handle errors here\n    // instead of a catch() block so that we don't swallow\n    // exceptions from actual bugs in components.\n    error => {\n      setIsLoaded(true);\n      setError(error);\n    });\n  }, []);\n\n  if (error) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 14\n      }\n    }, \"Error: \", error.message);\n  } else if (!isLoaded) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 14\n      }\n    }, \"Loading...\");\n  } else {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container-fluid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 2\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 3\n      }\n    }, quotes.map(quote => /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-sm\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      class: \"card\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"h5\", {\n      class: \"card-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 7\n      }\n    }, quote.Name), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"card-body\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 8\n      }\n    }, /*#__PURE__*/React.createElement(\"h5\", {\n      class: \"card-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }\n    }, quote.Street, \" \", quote.City), /*#__PURE__*/React.createElement(\"p\", {\n      class: \"card-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 10\n      }\n    }, quote.Email), /*#__PURE__*/React.createElement(\"a\", {\n      href: \"/\",\n      class: \"btn btn-primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 11\n      }\n    }, \"Edit\")))))));\n  }\n}\n\nexport default Quotes;","map":{"version":3,"sources":["/Users/nicholasrodgers/go/src/github.com/njr8392/quotesys/client/src/Quote.js"],"names":["React","useState","useEffect","Quotes","error","setError","isLoaded","setIsLoaded","quotes","setQuote","fetch","then","res","json","result","message","map","quote","Name","Street","City","Email"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;;AACA,SAASC,MAAT,GAAiB;AACb,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBJ,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACK,QAAD,EAAWC,WAAX,IAA0BN,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM,CAACO,MAAD,EAASC,QAAT,IAAqBR,QAAQ,CAAC,EAAD,CAAnC,CAHa,CAKb;AACA;AACA;;AACAC,EAAAA,SAAS,CAAC,MAAM;AACdQ,IAAAA,KAAK,CAAC,QAAD,CAAL,CACGC,IADH,CACQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADf,EAEGF,IAFH,CAGKG,MAAD,IAAY;AACVP,MAAAA,WAAW,CAAC,IAAD,CAAX;AACAE,MAAAA,QAAQ,CAACK,MAAD,CAAR;AACD,KANL,EAOI;AACA;AACA;AACCV,IAAAA,KAAD,IAAW;AACTG,MAAAA,WAAW,CAAC,IAAD,CAAX;AACAF,MAAAA,QAAQ,CAACD,KAAD,CAAR;AACD,KAbL;AAeD,GAhBQ,EAgBN,EAhBM,CAAT;;AAkBA,MAAIA,KAAJ,EAAW;AACT,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAaA,KAAK,CAACW,OAAnB,CAAP;AACD,GAFD,MAEO,IAAI,CAACT,QAAL,EAAe;AACpB,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAP;AACD,GAFM,MAEA;AACL,wBACL;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACC;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACEE,MAAM,CAACQ,GAAP,CAAWC,KAAK,iBAChB;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACC;AAAK,MAAA,KAAK,EAAC,MAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACC;AAAI,MAAA,KAAK,EAAC,aAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAyBA,KAAK,CAACC,IAA/B,CADD,eAEE;AAAK,MAAA,KAAK,EAAC,WAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACC;AAAI,MAAA,KAAK,EAAC,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAwBD,KAAK,CAACE,MAA9B,OAAuCF,KAAK,CAACG,IAA7C,CADD,eAEE;AAAG,MAAA,KAAK,EAAC,WAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAsBH,KAAK,CAACI,KAA5B,CAFF,eAGG;AAAG,MAAA,IAAI,EAAC,GAAR;AAAY,MAAA,KAAK,EAAC,iBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHH,CAFF,CADD,CADA,CADF,CADD,CADK;AAkBD;AACF;;AACH,eAAelB,MAAf","sourcesContent":["import React, {useState, useEffect} from 'react';\nfunction Quotes(){\n    const [error, setError] = useState(null);\n    const [isLoaded, setIsLoaded] = useState(false);\n    const [quotes, setQuote] = useState([]);\n  \n    // Note: the empty deps array [] means\n    // this useEffect will run once\n    // similar to componentDidMount()\n    useEffect(() => {\n      fetch(\"/quote\")\n        .then(res => res.json())\n        .then(\n          (result) => {\n            setIsLoaded(true);\n            setQuote(result);\n          },\n          // Note: it's important to handle errors here\n          // instead of a catch() block so that we don't swallow\n          // exceptions from actual bugs in components.\n          (error) => {\n            setIsLoaded(true);\n            setError(error);\n          }\n        )\n    }, [])\n  \n    if (error) {\n      return <div>Error: {error.message}</div>;\n    } else if (!isLoaded) {\n      return <div>Loading...</div>;\n    } else {\n      return(\n\t<div className=\"container-fluid\">\n\t\t<div className=\"row\">\n\t\t\t{quotes.map(quote => (\n\t\t\t\t<div className=\"col-sm\">\n\t\t\t\t <div class=\"card\">\n\t\t\t\t  <h5 class=\"card-header\">{quote.Name}</h5>\n\t\t\t\t   <div class=\"card-body\">\n\t\t\t\t    <h5 class=\"card-title\">{quote.Street} {quote.City}</h5>\n\t\t\t\t     <p class=\"card-text\">{quote.Email}</p>\n\t\t\t\t      <a href=\"/\" class=\"btn btn-primary\">Edit</a>\n\t\t\t\t    </div>\n\t\t\t\t</div>\n\t\t\t      </div>\n\t\t\t     ))}\n\t\t</div>\n\t</div>\n      );\n    }\n  }\nexport default Quotes;\n"]},"metadata":{},"sourceType":"module"}